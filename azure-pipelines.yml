# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: Build and Run Sonar Analysis
    jobs:

    - job: Build
      timeoutInMinutes: 120        # how long to run the job before automatically cancelling
      cancelTimeoutInMinutes: 2   # how much time to give 'run always even if cancelled tasks' before stopping them

      steps:
      - checkout: self
        persistCredentials: true
        clean: true
        fetchDepth: 0

      - script: echo Hello, world!
        displayName: 'Run a one-line script'

      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'

      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
          
      - task: PowerShell@2
        enabled: false
        name: docker
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            pwd
            ls
            docker build -t node:$(Build.BuildNumber) .
            Write-Host "Hello World"
            #${env:ARM_CLIENT_ID}
            #${env:ARM_CLIENT_SECRET}
            #${env:ARM_SUBSCRIPTION_ID}
            #${env:ARM_TENANT_ID}
          workingDirectory: '$(Build.SourcesDirectory)/app'

      - task: SonarCloudPrepare@3
        inputs:
          SonarQube: 'sonarcloud'
          organization: 'silencfox'
          scannerMode: 'cli'
          configMode: 'file'

      - task: SonarCloudAnalyze@3
        enabled: false
        inputs:
          jdkversion: 'JAVA_HOME'

      - task: SonarCloudPublish@3
        inputs:
          pollingTimeoutSec: '300'


      - task: Docker@2
        enabled: false
        name: "Docker_Build"
        displayName: "Build and Push"
        inputs:
          containerRegistry: 'DOckerHub'
          repository: 'silencfox/devsudemo'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildId)
            latest


      - task: Bash@3
        enabled: true
        name: tfstates
        displayName: "Crear terraform storage"
        inputs:
          targetType: 'inline'
          script: |
            mv terraform.tmptfvars terraform.tfvars
            terraform init
            terraform plan
            terraform apply --auto-approve
          workingDirectory: '$(Build.SourcesDirectory)/tfstate'
          bashEnvValue: |
            ARM_CLIENT_ID: $(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID: $(ARM_TENANT_ID)

      - task: PowerShell@2
        enabled: false
        name: tfstates
        displayName: "Crear terraform storage"
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            Rename-Item -Path "terraform.tmptfvars" -NewName "terraform.tfvars"
            terraform init
            terraform plan
            terraform apply --auto-approve
          workingDirectory: '$(Build.SourcesDirectory)/tfstate'

      - task: PowerShell@2
        enabled: true
        name: terraform
        displayName: "Crear AKS"
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            Rename-Item -Path "terraform.tmptfvars" -NewName "terraform.tfvars"
            terraform init
            terraform plan
            terraform apply --auto-approve
          workingDirectory: '$(Build.SourcesDirectory)/infra'



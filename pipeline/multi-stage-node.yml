parameters:
- name: environments
  type: object
  default: ""
stages:
  - stage: Build_And_Analyze
    displayName: Build And Analyze
    jobs: 
    - job: 'Build_app'
      timeoutInMinutes: 120        # how long to run the job before automatically cancelling
      cancelTimeoutInMinutes: 2   # how much time to give 'run always even if cancelled tasks' before stopping them

      steps:
      - checkout: self
        persistCredentials: true
        clean: true
        fetchDepth: 0


      - task: DownloadSecureFile@1
        name: 'terraformtfvars'
        displayName: 'download tfvars'
        inputs:
          secureFile: 'terraform.tfvars'

      - task: DownloadSecureFile@1
        name: 'terraform_alonetfvars'
        displayName: 'download alone tfvars'
        inputs:
          secureFile: 'terraform_alone.tfvars'

      - task: Bash@3

        inputs:
          targetType: 'inline'
          script: |
            chmod go-r "$(terraform_alonetfvars.secureFilePath)"
            chmod go-r "$(terraformtfvars.secureFilePath)"
            cat "$(terraform_alonetfvars.secureFilePath)"
            cat "$(terraformtfvars.secureFilePath)"
            mv $(terraform_alonetfvars.secureFilePath) $(Build.SourcesDirectory)/infra/standalone/acr/terraform.tfvars
            mv $(terraformtfvars.secureFilePath) $(Build.SourcesDirectory)/infra/terraform.tfvars
          workingDirectory: '$(Build.SourcesDirectory)'

      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'

      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'


      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'

      - task: Bash@3
        enabled: false
        displayName: "Run Unit Tests Jest"
        inputs:
          targetType: 'inline'
          script: |
            npm install --save-dev jest-junit
            npm install
            npm test
            npx jest --reporters=default --reporters=jest-junit

          workingDirectory: '$(Build.SourcesDirectory)/app'
          bashEnvValue: |
            'JEST_JUNIT_OUTPUT_DIR: test-results'
            JEST_JUNIT_OUTPUT_NAME: test_results.xml


      - task: PublishTestResults@2
        enabled: false
        condition: succeededOrFailed()
        displayName: "Publish JUnit Test Results"
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'junit.xml'
          searchFolder: '$(Build.SourcesDirectory)/app'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Pruebas unitarias'

      - task: PublishCodeCoverageResults@2
        enabled: false
        displayName: "Publish Code Coverage HTML"
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/app/coverage/lcov.info'
          reportDirectory: '$(Build.SourcesDirectory)/app/coverage/lcov-report'
          pathToSources: '$(Build.SourcesDirectory)/app'
          failIfCoverageEmpty: true


      - task: SonarCloudPrepare@3
        inputs:
          SonarQube: 'sonarcloud'
          organization: 'silencfox'
          scannerMode: 'cli'
          configMode: 'file'

      - task: SonarCloudAnalyze@3
        enabled: false
        inputs:
          jdkversion: 'JAVA_HOME'

      - task: SonarCloudPublish@3
        inputs:
          pollingTimeoutSec: '300'

      - task: Bash@3
        enabled: false
        name: tfstates
        displayName: "Create_TF_Storage"
        inputs:
          targetType: 'inline'
          script: |
            mv terraform.tmptfvars terraform.tfvars
            terraform init
            terraform plan
            terraform apply --auto-approve
          workingDirectory: '$(Build.SourcesDirectory)/tfstate'
          bashEnvValue: |
            ARM_CLIENT_ID: $(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID: $(ARM_TENANT_ID)




      - task: Bash@3
        enabled: true
        name: ACR
        displayName: "Create Azure ACR"
        inputs:
          targetType: 'inline'
          script: |
            chmod go-r "$(terraform_alonetfvars.secureFilePath)"
            chmod go-r "$(terraformtfvars.secureFilePath)"
            mv $(terraform_alone.tfvars.secureFilePath) ./terraform.tfvars
            terraform init
            terraform plan
            terraform apply --auto-approve
          workingDirectory: '$(Build.SourcesDirectory)/infra/standalone/acr'
          bashEnvValue: |
            ARM_CLIENT_ID: $(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID: $(ARM_TENANT_ID)


      - task: AzureCLI@2
        name: "Docker_Build_And_Push"
        displayName: "Docker Build And Push"
        enabled: false
        inputs:
          azureSubscription: 'Azure subscription 1(94af5430-b804-4dd0-ae21-6bd2a5feaedf)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            docker login "acrdevsu.azurecr.io" -u "$(ARM_CLIENT_ID)" -p "$(ARM_CLIENT_SECRET)"
            docker build -q -t acrdevsu.azurecr.io/devsudemo:latest -t acrdevsu.azurecr.io/devsudemo:$(Build.BuildId) .
            ARM_ACR_LOGIN_SERVER="acrdevsu.azurecr.io"
            docker push acrdevsu.azurecr.io/devsudemo:latest
          addSpnToEnvironment: true
          useGlobalConfig: true
          workingDirectory: '$(Build.SourcesDirectory)/app'


  - ${{ each environment in parameters.environments }}:
      - stage: Deploy${{ environment.name }}
        displayName: Deploy ${{ environment.name }}
        dependsOn: ${{ environment.dependsOn }}

        jobs: 

        - deployment: Deploy${{ environment.name }}
          environment: ${{ environment.name }}
          workspace:
            clean: all
          strategy:
            runOnce:
              preDeploy:
                steps:
                - checkout: self
                  persistCredentials: true
                  clean: true
                  fetchDepth: 0
                - script: echo "Desplegando a QA"

              deploy:
                steps:
                - checkout: self
                  persistCredentials: true
                  clean: true
                  fetchDepth: 0
                - script: echo "Desplegando a QA"

                - task: DownloadSecureFile@1
                  name: 'terraformtfvars'
                  displayName: 'download tfvars'
                  inputs:
                    secureFile: 'terraform.tfvars'

                - task: DownloadSecureFile@1
                  name: 'terraform_alonetfvars'
                  displayName: 'download alone tfvars'
                  inputs:
                    secureFile: 'terraform_alone.tfvars'

                - task: TerraformInstaller@1
                  inputs:
                    terraformVersion: 'latest'

                - task: Bash@3

                  inputs:
                    targetType: 'inline'
                    script: |
                      chmod go-r "$(terraform_alonetfvars.secureFilePath)"
                      chmod go-r "$(terraformtfvars.secureFilePath)"
                      cat "$(terraform_alonetfvars.secureFilePath)"
                      cat "$(terraformtfvars.secureFilePath)"
                      mv $(terraform_alonetfvars.secureFilePath) $(Build.SourcesDirectory)/infra/standalone/acr/terraform.tfvars
                      mv $(terraformtfvars.secureFilePath) $(Build.SourcesDirectory)/infra/terraform.tfvars
                    workingDirectory: '$(Build.SourcesDirectory)'

                - task: Bash@3
                  enabled: false
                  name: replacevar
                  displayName: "Crear AKS"
                  inputs:
                    targetType: 'inline'
                    script: |
                      mv ./infra/terraform.tmptfvars ./infra/terraform.tfvars
                      mv ./tfstate/terraform.tmptfvars ./tfstate/terraform.tfvars
                    workingDirectory: '$(Build.SourcesDirectory)'

                - task: replacetokens@6
                  inputs:
                    root: '$(Build.SourcesDirectory)/infra'
                    sources: 'terraform.tfvars'

                - task: Bash@3
                  enabled: true
                  name: terraform2
                  displayName: "Crear AKS"
                  inputs:
                    targetType: 'inline'
                    script: |
                      #mv terraform.tmptfvars terraform.tfvars
                      terraform init -backend-config="backend-${{ environment.name }}.tfvars" -reconfigure
                      terraform plan -var="environment=${{ environment.name }}" -out="${{ environment.name }}.tfplan"
                      terraform apply -auto-approve "${{ environment.name }}.tfplan"

                      terraform destroy --auto-approve -var="environment=${{ environment.name }}"
                      #terraform apply --auto-approve -var="TF_VAR_ghtoken=$(TF_VAR_ghtoken)" -var="environment=${{ environment.name }}"
                    workingDirectory: '$(Build.SourcesDirectory)/infra'
                    #bashEnvValue: |
                    #  ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                    #  ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                    #  ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
                    #  ARM_TENANT_ID: $(ARM_TENANT_ID)
                    #  TF_VAR_ghtoken: $(TF_VAR_ghtoken)

              on:
                failure:
                  steps:
                  - checkout: self
                    persistCredentials: true
                    clean: true
                    fetchDepth: 0

                  - script: echo "Desplegando a QA"

                  - task: DownloadSecureFile@1
                    name: 'terraform_alonetfvars_fail'
                    enabled: false
                    displayName: 'download tfvars'
                    inputs:
                      secureFile: 'terraform.tfvars'

                  - task: DownloadSecureFile@1
                    name: 'terraform_tfvars_fail'
                    enabled: false
                    displayName: 'download alone tfvars'
                    inputs:
                      secureFile: 'terraform_alone.tfvars'

                  - task: TerraformInstaller@1
                    inputs:
                      terraformVersion: 'latest'

                  - task: Bash@3
                    inputs:
                      targetType: 'inline'
                      script: |
                        chmod go-r "$(terraform_alonetfvars.secureFilePath)"
                        chmod go-r "$(terraformtfvars.secureFilePath)"
                        cat "$(terraform_alonetfvars.secureFilePath)"
                        cat "$(terraformtfvars.secureFilePath)"
                        mv $(terraform_alonetfvars.secureFilePath) $(Build.SourcesDirectory)/infra/standalone/acr/terraform.tfvars
                        mv $(terraformtfvars.secureFilePath) $(Build.SourcesDirectory)/infra/terraform.tfvars
                      workingDirectory: '$(Build.SourcesDirectory)'

                  - task: Bash@3
                    enabled: true
                    displayName: "Roll Back AKS"
                    inputs:
                      targetType: 'inline'
                      script: |
                        terraform init -backend-config="backend-${{ environment.name }}.tfvars" -reconfigure
                        terraform destroy -auto-approve 
                success:
                  steps:
                  - checkout: self
                    persistCredentials: true
                    clean: true
                    fetchDepth: 0

                  - script: echo "Desplegando a QA"

                  - task: DownloadSecureFile@1
                    enabled: false
                    displayName: 'download tfvars'
                    inputs:
                      secureFile: 'terraform.tfvars'

                  - task: DownloadSecureFile@1
                    enabled: false
                    displayName: 'download alone tfvars'
                    inputs:
                      secureFile: 'terraform_alone.tfvars'

                  - task: TerraformInstaller@1
                    inputs:
                      terraformVersion: 'latest'

                  - task: Bash@3
                    enabled: true
                    displayName: "Mensaje"
                    inputs:
                      targetType: 'inline'
                      script: |
                        echo "Successfully deployed to ${{ environment.name }}"    
                        echo "Retaining build..."
                        terraform init -backend-config="backend-${{ environment.name }}.tfvars" -reconfigure
                        terraform destroy -auto-approve                         